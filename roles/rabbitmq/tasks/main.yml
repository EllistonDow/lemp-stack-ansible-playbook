---
# RabbitMQ installation and configuration tasks

- name: Install required packages
  apt:
    name:
      - curl
      - gnupg
      - apt-transport-https
      - sudo
      - procps
      - socat
      - logrotate
      - init-system-helpers
    state: present
    update_cache: yes

# 完全清理现有的RabbitMQ和Erlang配置
- name: Stop any running RabbitMQ
  systemd:
    name: rabbitmq-server
    state: stopped
  ignore_errors: yes

- name: Kill any existing RabbitMQ processes
  shell: pkill -9 -f beam.smp || true
  changed_when: false
  ignore_errors: yes

- name: Remove any existing RabbitMQ installations
  apt:
    name:
      - rabbitmq-server
      - erlang
      - erlang-base
      - erlang-nox
      - erlang-dev
      - erlang-common
    state: absent
    purge: yes
  ignore_errors: yes

- name: Remove any existing RabbitMQ repositories
  file:
    path: "{{ item }}"
    state: absent
  with_items:
    - /etc/apt/sources.list.d/rabbitmq_rabbitmq-server.list
    - /etc/apt/sources.list.d/packagecloud_io_rabbitmq_rabbitmq_server_ubuntu.list
    - /etc/apt/sources.list.d/rabbitmq.list
    - /etc/apt/sources.list.d/erlang.list
  ignore_errors: yes

- name: Clean any existing Erlang/RabbitMQ data
  file:
    path: "{{ item }}"
    state: absent
  with_items:
    - /var/lib/rabbitmq
    - /var/log/rabbitmq
    - /etc/rabbitmq
    - /usr/lib/rabbitmq
    - /etc/systemd/system/rabbitmq-server.service.d
  ignore_errors: yes

- name: Update apt cache after cleaning
  apt:
    update_cache: yes
    cache_valid_time: 0
  ignore_errors: yes

# 下载和安装RabbitMQ团队的签名密钥
- name: Download RabbitMQ Team signing key
  shell: curl -1sLf "https://keys.openpgp.org/vks/v1/by-fingerprint/0A9AF2115F4687BD29803A206B73A36E6026DFCA" | gpg --dearmor > /usr/share/keyrings/com.rabbitmq.team.gpg
  args:
    creates: /usr/share/keyrings/com.rabbitmq.team.gpg
  ignore_errors: yes

# 下载和安装Erlang存储库密钥
- name: Download Cloudsmith Erlang repository key
  shell: curl -1sLf https://github.com/rabbitmq/signing-keys/releases/download/3.0/cloudsmith.rabbitmq-erlang.E495BB49CC4BBE5B.key | gpg --dearmor > /usr/share/keyrings/rabbitmq.E495BB49CC4BBE5B.gpg
  args:
    creates: /usr/share/keyrings/rabbitmq.E495BB49CC4BBE5B.gpg
  ignore_errors: yes

# 下载和安装RabbitMQ服务器存储库密钥
- name: Download Cloudsmith RabbitMQ server repository key
  shell: curl -1sLf https://github.com/rabbitmq/signing-keys/releases/download/3.0/cloudsmith.rabbitmq-server.9F4587F226208342.key | gpg --dearmor > /usr/share/keyrings/rabbitmq.9F4587F226208342.gpg
  args:
    creates: /usr/share/keyrings/rabbitmq.9F4587F226208342.gpg
  ignore_errors: yes

# 添加RabbitMQ和Erlang存储库
- name: Configure APT repositories
  copy:
    dest: /etc/apt/sources.list.d/rabbitmq.list
    content: |
      ## Provides modern Erlang/OTP releases
      ##
      deb [arch=amd64 signed-by=/usr/share/keyrings/rabbitmq.E495BB49CC4BBE5B.gpg] https://ppa1.rabbitmq.com/rabbitmq/rabbitmq-erlang/deb/ubuntu jammy main
      deb-src [signed-by=/usr/share/keyrings/rabbitmq.E495BB49CC4BBE5B.gpg] https://ppa1.rabbitmq.com/rabbitmq/rabbitmq-erlang/deb/ubuntu jammy main

      # 另一个镜像，提供冗余
      deb [arch=amd64 signed-by=/usr/share/keyrings/rabbitmq.E495BB49CC4BBE5B.gpg] https://ppa2.rabbitmq.com/rabbitmq/rabbitmq-erlang/deb/ubuntu jammy main
      deb-src [signed-by=/usr/share/keyrings/rabbitmq.E495BB49CC4BBE5B.gpg] https://ppa2.rabbitmq.com/rabbitmq/rabbitmq-erlang/deb/ubuntu jammy main

      ## Provides RabbitMQ
      ##
      deb [arch=amd64 signed-by=/usr/share/keyrings/rabbitmq.9F4587F226208342.gpg] https://ppa1.rabbitmq.com/rabbitmq/rabbitmq-server/deb/ubuntu jammy main
      deb-src [signed-by=/usr/share/keyrings/rabbitmq.9F4587F226208342.gpg] https://ppa1.rabbitmq.com/rabbitmq/rabbitmq-server/deb/ubuntu jammy main

      # 另一个镜像，提供冗余
      deb [arch=amd64 signed-by=/usr/share/keyrings/rabbitmq.9F4587F226208342.gpg] https://ppa2.rabbitmq.com/rabbitmq/rabbitmq-server/deb/ubuntu jammy main
      deb-src [signed-by=/usr/share/keyrings/rabbitmq.9F4587F226208342.gpg] https://ppa2.rabbitmq.com/rabbitmq/rabbitmq-server/deb/ubuntu jammy main
    mode: '0644'
    owner: root
    group: root

# 更新APT缓存
- name: Update apt cache after adding RabbitMQ repositories
  apt:
    update_cache: yes

# 根据官方文档安装特定版本的Erlang
- name: Install specific Erlang version compatible with RabbitMQ
  apt:
    name:
      - "erlang-base=1:26.2.5.6-1"
      - "erlang-asn1=1:26.2.5.6-1"
      - "erlang-crypto=1:26.2.5.6-1"
      - "erlang-eldap=1:26.2.5.6-1"
      - "erlang-ftp=1:26.2.5.6-1"
      - "erlang-inets=1:26.2.5.6-1"
      - "erlang-mnesia=1:26.2.5.6-1"
      - "erlang-os-mon=1:26.2.5.6-1"
      - "erlang-parsetools=1:26.2.5.6-1"
      - "erlang-public-key=1:26.2.5.6-1"
      - "erlang-runtime-tools=1:26.2.5.6-1"
      - "erlang-snmp=1:26.2.5.6-1"
      - "erlang-ssl=1:26.2.5.6-1"
      - "erlang-syntax-tools=1:26.2.5.6-1"
      - "erlang-tftp=1:26.2.5.6-1"
      - "erlang-tools=1:26.2.5.6-1"
      - "erlang-xmerl=1:26.2.5.6-1"
    state: present
    update_cache: yes
  ignore_errors: yes

# 创建必要的目录
- name: Create necessary directories
  file:
    path: "{{ item }}"
    state: directory
    owner: root
    group: root
    mode: '0755'
  with_items:
    - /var/lib/rabbitmq
    - /var/log/rabbitmq
    - /etc/rabbitmq
    - /etc/systemd/system/rabbitmq-server.service.d

# 配置systemd覆盖
- name: Configure systemd override for RabbitMQ
  copy:
    dest: /etc/systemd/system/rabbitmq-server.service.d/override.conf
    content: |
      [Service]
      LimitNOFILE=65536
      LimitNPROC=4096
      TimeoutStartSec=180
      Restart=on-failure
      RestartSec=10
    mode: '0644'
    owner: root
    group: root

# 重新加载systemd守护程序
- name: Reload systemd daemon
  systemd:
    daemon_reload: yes

# 安装RabbitMQ服务器
- name: Install RabbitMQ server
  apt:
    name: rabbitmq-server
    state: present
    update_cache: yes
    install_recommends: yes
    dpkg_options: 'force-confnew,force-confdef'
  ignore_errors: yes

# 设置RabbitMQ目录的正确权限
- name: Set correct permissions for RabbitMQ directories
  file:
    path: "{{ item }}"
    state: directory
    owner: rabbitmq
    group: rabbitmq
    mode: '0755'
    recurse: yes
  with_items:
    - /var/lib/rabbitmq
    - /var/log/rabbitmq
    - /etc/rabbitmq
  ignore_errors: yes

# 配置环境和限制
- name: Configure RabbitMQ environment file
  copy:
    dest: /etc/default/rabbitmq-server
    content: |
      # RabbitMQ服务器环境变量
      RABBITMQ_ULIMIT_NOFILES=65535
      RABBITMQ_SERVER_ADDITIONAL_ERL_ARGS="-setcookie rabbitmq-cookie"
      RABBITMQ_SERVER_START_ARGS=""
      # 日志配置
      RABBITMQ_LOGS=/var/log/rabbitmq/rabbitmq.log
      RABBITMQ_SASL_LOGS=/var/log/rabbitmq/rabbitmq-sasl.log
    mode: '0644'
    owner: root
    group: root

# 配置RabbitMQ
- name: Configure RabbitMQ
  template:
    src: rabbitmq.conf.j2
    dest: /etc/rabbitmq/rabbitmq.conf
    owner: rabbitmq
    group: rabbitmq
    mode: '0644'
  ignore_errors: yes

# 创建RabbitMQ高级配置
- name: Create RabbitMQ advanced config
  copy:
    dest: /etc/rabbitmq/advanced.config
    content: |
      [
        {rabbit, [
          {tcp_listen_options, [
            {backlog, 128},
            {nodelay, true},
            {linger, {true, 0}},
            {exit_on_close, false}
          ]},
          {consumer_timeout, 3600000}
        ]}
      ].
    owner: rabbitmq
    group: rabbitmq
    mode: '0644'
  ignore_errors: yes

# 三次尝试启动RabbitMQ
- name: First try - Start RabbitMQ service
  systemd:
    name: rabbitmq-server
    state: started
    enabled: yes
  ignore_errors: yes

- name: Wait for RabbitMQ to possibly start
  wait_for:
    timeout: 10
  ignore_errors: yes

- name: Check if RabbitMQ is running
  shell: systemctl status rabbitmq-server | grep "Active:" | grep "running"
  register: rabbitmq_running
  changed_when: false
  ignore_errors: yes

- name: Second try - Restart RabbitMQ with environment settings
  block:
    - name: Reset RabbitMQ environment
      file:
        path: /var/lib/rabbitmq/.erlang.cookie
        state: absent
      ignore_errors: yes
      when: rabbitmq_running.rc != 0

    - name: Create new Erlang cookie
      copy:
        dest: /var/lib/rabbitmq/.erlang.cookie
        content: "rabbitmq-cookie-{{ ansible_date_time.epoch }}"
        owner: rabbitmq
        group: rabbitmq
        mode: '0400'
      ignore_errors: yes
      when: rabbitmq_running.rc != 0

    - name: Second attempt to start RabbitMQ
      systemd:
        name: rabbitmq-server
        state: restarted
      ignore_errors: yes
      when: rabbitmq_running.rc != 0
  when: rabbitmq_running.rc != 0

- name: Wait before checking again
  wait_for:
    timeout: 20
  ignore_errors: yes
  when: rabbitmq_running.rc != 0

- name: Final check if RabbitMQ is running
  shell: systemctl status rabbitmq-server | grep "Active:" || echo "Not running"
  register: final_rabbitmq_status
  changed_when: false
  ignore_errors: yes

- name: Display RabbitMQ status
  debug:
    msg: "RabbitMQ服务状态: {{ final_rabbitmq_status.stdout }}"

- name: Enable RabbitMQ management plugin (only if RabbitMQ is running)
  command: rabbitmq-plugins enable rabbitmq_management
  ignore_errors: yes
  when: "('running' in final_rabbitmq_status.stdout) or ('active' in final_rabbitmq_status.stdout)"

- name: Test RabbitMQ API responsiveness
  uri:
    url: http://localhost:15672/api/overview
    method: GET
    user: guest
    password: guest
    status_code: 200
    timeout: 5
    force_basic_auth: yes
  register: rabbitmq_api_response
  ignore_errors: yes
  when: "('running' in final_rabbitmq_status.stdout) or ('active' in final_rabbitmq_status.stdout)"
  
- name: Verify RabbitMQ is responding
  debug:
    msg: "RabbitMQ API响应: {{ rabbitmq_api_response | to_json if 'rabbitmq_api_response' in vars else '未测试API，因为服务未运行' }}"
  ignore_errors: yes

- name: Create RabbitMQ admin user (only if RabbitMQ is running)
  rabbitmq_user:
    user: "{{ rabbitmq_admin_user }}"
    password: "{{ rabbitmq_admin_password }}"
    vhost: /
    configure_priv: .*
    read_priv: .*
    write_priv: .*
    tags: administrator
    state: present
  when: 
    - rabbitmq_admin_user is defined
    - rabbitmq_admin_password is defined
    - "('running' in final_rabbitmq_status.stdout) or ('active' in final_rabbitmq_status.stdout)"
  ignore_errors: yes

- name: Create RabbitMQ application vhost (only if RabbitMQ is running)
  rabbitmq_vhost:
    name: "{{ rabbitmq_vhost }}"
    state: present
  when: 
    - rabbitmq_vhost is defined
    - "('running' in final_rabbitmq_status.stdout) or ('active' in final_rabbitmq_status.stdout)"
  ignore_errors: yes

- name: Create RabbitMQ application user (only if RabbitMQ is running)
  rabbitmq_user:
    user: "{{ rabbitmq_app_user }}"
    password: "{{ rabbitmq_app_password }}"
    vhost: "{{ rabbitmq_vhost | default('/') }}"
    configure_priv: .*
    read_priv: .*
    write_priv: .*
    state: present
  when: 
    - rabbitmq_app_user is defined
    - rabbitmq_app_password is defined
    - "('running' in final_rabbitmq_status.stdout) or ('active' in final_rabbitmq_status.stdout)"
  ignore_errors: yes

- name: Allow RabbitMQ through UFW
  ufw:
    rule: allow
    port: "{{ item }}"
    proto: tcp
  with_items:
    - "{{ rabbitmq_port }}"
    - "{{ rabbitmq_management_port }}"
  ignore_errors: yes

# 检查 RabbitMQ 服务状态
- name: Check RabbitMQ service status
  shell: systemctl status rabbitmq-server || echo "RabbitMQ service status check failed"
  register: rabbitmq_status
  ignore_errors: yes
  changed_when: false

- name: Display RabbitMQ service status
  debug:
    msg: "RabbitMQ服务状态: {{ rabbitmq_status.stdout }}"

# 检查 RabbitMQ 端口是否开放
- name: Check if RabbitMQ port is open
  shell: netstat -tuln | grep -w 5672 || ss -tuln | grep -w 5672 || echo "Port check failed"
  register: rabbitmq_port_check
  ignore_errors: yes
  changed_when: false

- name: Display RabbitMQ port status
  debug:
    msg: "RabbitMQ端口状态: {{ rabbitmq_port_check.stdout }}"

# 尝试列出RabbitMQ用户
- name: Try to list RabbitMQ users
  shell: rabbitmqctl list_users || echo "Failed to list users"
  register: rabbitmq_users
  ignore_errors: yes
  changed_when: false

- name: Display RabbitMQ users
  debug:
    msg: "RabbitMQ用户: {{ rabbitmq_users.stdout }}" 